/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { ActionResult } from '../models/action-result';
import { apiBusinessBizIdEmployeesPost } from '../fn/biz-members/api-business-biz-id-employees-post';
import { ApiBusinessBizIdEmployeesPost$Params } from '../fn/biz-members/api-business-biz-id-employees-post';
import { apiBusinessBizIdMembersBizContactIdDelete } from '../fn/biz-members/api-business-biz-id-members-biz-contact-id-delete';
import { ApiBusinessBizIdMembersBizContactIdDelete$Params } from '../fn/biz-members/api-business-biz-id-members-biz-contact-id-delete';
import { apiBusinessBizIdMembersGet } from '../fn/biz-members/api-business-biz-id-members-get';
import { ApiBusinessBizIdMembersGet$Params } from '../fn/biz-members/api-business-biz-id-members-get';
import { apiBusinessBizIdMembersPost } from '../fn/biz-members/api-business-biz-id-members-post';
import { ApiBusinessBizIdMembersPost$Params } from '../fn/biz-members/api-business-biz-id-members-post';
import { apiBusinessBizIdNonSwlBusinessManagersBizContactIdPut } from '../fn/biz-members/api-business-biz-id-non-swl-business-managers-biz-contact-id-put';
import { ApiBusinessBizIdNonSwlBusinessManagersBizContactIdPut$Params } from '../fn/biz-members/api-business-biz-id-non-swl-business-managers-biz-contact-id-put';
import { apiBusinessBizIdNonSwlBusinessManagersPost } from '../fn/biz-members/api-business-biz-id-non-swl-business-managers-post';
import { ApiBusinessBizIdNonSwlBusinessManagersPost$Params } from '../fn/biz-members/api-business-biz-id-non-swl-business-managers-post';
import { apiBusinessBizIdNonSwlControllingMembersBizContactIdGet } from '../fn/biz-members/api-business-biz-id-non-swl-controlling-members-biz-contact-id-get';
import { ApiBusinessBizIdNonSwlControllingMembersBizContactIdGet$Params } from '../fn/biz-members/api-business-biz-id-non-swl-controlling-members-biz-contact-id-get';
import { apiBusinessBizIdNonSwlControllingMembersBizContactIdPut } from '../fn/biz-members/api-business-biz-id-non-swl-controlling-members-biz-contact-id-put';
import { ApiBusinessBizIdNonSwlControllingMembersBizContactIdPut$Params } from '../fn/biz-members/api-business-biz-id-non-swl-controlling-members-biz-contact-id-put';
import { apiBusinessBizIdNonSwlControllingMembersPost } from '../fn/biz-members/api-business-biz-id-non-swl-controlling-members-post';
import { ApiBusinessBizIdNonSwlControllingMembersPost$Params } from '../fn/biz-members/api-business-biz-id-non-swl-controlling-members-post';
import { apiBusinessBizIdSwlBusinessManagersPost } from '../fn/biz-members/api-business-biz-id-swl-business-managers-post';
import { ApiBusinessBizIdSwlBusinessManagersPost$Params } from '../fn/biz-members/api-business-biz-id-swl-business-managers-post';
import { apiBusinessBizIdSwlControllingMembersPost } from '../fn/biz-members/api-business-biz-id-swl-controlling-members-post';
import { ApiBusinessBizIdSwlControllingMembersPost$Params } from '../fn/biz-members/api-business-biz-id-swl-controlling-members-post';
import { apiBusinessLicenceApplicationStakeholderInvitationBizContactIdGet } from '../fn/biz-members/api-business-licence-application-stakeholder-invitation-biz-contact-id-get';
import { ApiBusinessLicenceApplicationStakeholderInvitationBizContactIdGet$Params } from '../fn/biz-members/api-business-licence-application-stakeholder-invitation-biz-contact-id-get';
import { apiStakeholdersInvitesPost } from '../fn/biz-members/api-stakeholders-invites-post';
import { ApiStakeholdersInvitesPost$Params } from '../fn/biz-members/api-stakeholders-invites-post';
import { BizMemberResponse } from '../models/biz-member-response';
import { Members } from '../models/members';
import { NonSwlContactInfo } from '../models/non-swl-contact-info';
import { StakeholderAppInviteVerifyResponse } from '../models/stakeholder-app-invite-verify-response';
import { StakeholderInvitesCreateResponse } from '../models/stakeholder-invites-create-response';

@Injectable({ providedIn: 'root' })
export class BizMembersService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiBusinessBizIdMembersGet()` */
  static readonly ApiBusinessBizIdMembersGetPath = '/api/business/{bizId}/members';

  /**
   * Get Biz controlling members and employees, controlling member includes swl and non-swl
   * This is the latest active biz controlling members and employees, irrelevent to application.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiBusinessBizIdMembersGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiBusinessBizIdMembersGet$Response(params: ApiBusinessBizIdMembersGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Members>> {
    return apiBusinessBizIdMembersGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get Biz controlling members and employees, controlling member includes swl and non-swl
   * This is the latest active biz controlling members and employees, irrelevent to application.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiBusinessBizIdMembersGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiBusinessBizIdMembersGet(params: ApiBusinessBizIdMembersGet$Params, context?: HttpContext): Observable<Members> {
    return this.apiBusinessBizIdMembersGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Members>): Members => r.body)
    );
  }

  /** Path part for operation `apiBusinessBizIdMembersPost()` */
  static readonly ApiBusinessBizIdMembersPostPath = '/api/business/{bizId}/members';

  /**
   * Deprecated. Upsert Biz Application controlling members and employees, controlling members include swl and non-swl.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiBusinessBizIdMembersPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiBusinessBizIdMembersPost$Response(params: ApiBusinessBizIdMembersPost$Params, context?: HttpContext): Observable<StrictHttpResponse<ActionResult>> {
    return apiBusinessBizIdMembersPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Deprecated. Upsert Biz Application controlling members and employees, controlling members include swl and non-swl.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiBusinessBizIdMembersPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiBusinessBizIdMembersPost(params: ApiBusinessBizIdMembersPost$Params, context?: HttpContext): Observable<ActionResult> {
    return this.apiBusinessBizIdMembersPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<ActionResult>): ActionResult => r.body)
    );
  }

  /** Path part for operation `apiBusinessBizIdEmployeesPost()` */
  static readonly ApiBusinessBizIdEmployeesPostPath = '/api/business/{bizId}/employees';

  /**
   * Create Biz employee.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiBusinessBizIdEmployeesPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiBusinessBizIdEmployeesPost$Response(params: ApiBusinessBizIdEmployeesPost$Params, context?: HttpContext): Observable<StrictHttpResponse<BizMemberResponse>> {
    return apiBusinessBizIdEmployeesPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Create Biz employee.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiBusinessBizIdEmployeesPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiBusinessBizIdEmployeesPost(params: ApiBusinessBizIdEmployeesPost$Params, context?: HttpContext): Observable<BizMemberResponse> {
    return this.apiBusinessBizIdEmployeesPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<BizMemberResponse>): BizMemberResponse => r.body)
    );
  }

  /** Path part for operation `apiBusinessBizIdSwlControllingMembersPost()` */
  static readonly ApiBusinessBizIdSwlControllingMembersPostPath = '/api/business/{bizId}/swl-controlling-members';

  /**
   * Create Biz swl controlling member.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiBusinessBizIdSwlControllingMembersPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiBusinessBizIdSwlControllingMembersPost$Response(params: ApiBusinessBizIdSwlControllingMembersPost$Params, context?: HttpContext): Observable<StrictHttpResponse<BizMemberResponse>> {
    return apiBusinessBizIdSwlControllingMembersPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Create Biz swl controlling member.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiBusinessBizIdSwlControllingMembersPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiBusinessBizIdSwlControllingMembersPost(params: ApiBusinessBizIdSwlControllingMembersPost$Params, context?: HttpContext): Observable<BizMemberResponse> {
    return this.apiBusinessBizIdSwlControllingMembersPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<BizMemberResponse>): BizMemberResponse => r.body)
    );
  }

  /** Path part for operation `apiBusinessBizIdNonSwlControllingMembersPost()` */
  static readonly ApiBusinessBizIdNonSwlControllingMembersPostPath = '/api/business/{bizId}/non-swl-controlling-members';

  /**
   * Create Biz swl controlling member.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiBusinessBizIdNonSwlControllingMembersPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiBusinessBizIdNonSwlControllingMembersPost$Response(params: ApiBusinessBizIdNonSwlControllingMembersPost$Params, context?: HttpContext): Observable<StrictHttpResponse<BizMemberResponse>> {
    return apiBusinessBizIdNonSwlControllingMembersPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Create Biz swl controlling member.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiBusinessBizIdNonSwlControllingMembersPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiBusinessBizIdNonSwlControllingMembersPost(params: ApiBusinessBizIdNonSwlControllingMembersPost$Params, context?: HttpContext): Observable<BizMemberResponse> {
    return this.apiBusinessBizIdNonSwlControllingMembersPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<BizMemberResponse>): BizMemberResponse => r.body)
    );
  }

  /** Path part for operation `apiBusinessBizIdNonSwlControllingMembersBizContactIdGet()` */
  static readonly ApiBusinessBizIdNonSwlControllingMembersBizContactIdGetPath = '/api/business/{bizId}/non-swl-controlling-members/{bizContactId}';

  /**
   * Get non-swl Biz controlling members.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiBusinessBizIdNonSwlControllingMembersBizContactIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiBusinessBizIdNonSwlControllingMembersBizContactIdGet$Response(params: ApiBusinessBizIdNonSwlControllingMembersBizContactIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<NonSwlContactInfo>> {
    return apiBusinessBizIdNonSwlControllingMembersBizContactIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get non-swl Biz controlling members.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiBusinessBizIdNonSwlControllingMembersBizContactIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiBusinessBizIdNonSwlControllingMembersBizContactIdGet(params: ApiBusinessBizIdNonSwlControllingMembersBizContactIdGet$Params, context?: HttpContext): Observable<NonSwlContactInfo> {
    return this.apiBusinessBizIdNonSwlControllingMembersBizContactIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<NonSwlContactInfo>): NonSwlContactInfo => r.body)
    );
  }

  /** Path part for operation `apiBusinessBizIdNonSwlControllingMembersBizContactIdPut()` */
  static readonly ApiBusinessBizIdNonSwlControllingMembersBizContactIdPutPath = '/api/business/{bizId}/non-swl-controlling-members/{bizContactId}';

  /**
   * Update Non swl biz controlling member.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiBusinessBizIdNonSwlControllingMembersBizContactIdPut()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiBusinessBizIdNonSwlControllingMembersBizContactIdPut$Response(params: ApiBusinessBizIdNonSwlControllingMembersBizContactIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<BizMemberResponse>> {
    return apiBusinessBizIdNonSwlControllingMembersBizContactIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * Update Non swl biz controlling member.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiBusinessBizIdNonSwlControllingMembersBizContactIdPut$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiBusinessBizIdNonSwlControllingMembersBizContactIdPut(params: ApiBusinessBizIdNonSwlControllingMembersBizContactIdPut$Params, context?: HttpContext): Observable<BizMemberResponse> {
    return this.apiBusinessBizIdNonSwlControllingMembersBizContactIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<BizMemberResponse>): BizMemberResponse => r.body)
    );
  }

  /** Path part for operation `apiBusinessBizIdSwlBusinessManagersPost()` */
  static readonly ApiBusinessBizIdSwlBusinessManagersPostPath = '/api/business/{bizId}/swl-business-managers';

  /**
   * Create Biz swl business manager.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiBusinessBizIdSwlBusinessManagersPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiBusinessBizIdSwlBusinessManagersPost$Response(params: ApiBusinessBizIdSwlBusinessManagersPost$Params, context?: HttpContext): Observable<StrictHttpResponse<BizMemberResponse>> {
    return apiBusinessBizIdSwlBusinessManagersPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Create Biz swl business manager.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiBusinessBizIdSwlBusinessManagersPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiBusinessBizIdSwlBusinessManagersPost(params: ApiBusinessBizIdSwlBusinessManagersPost$Params, context?: HttpContext): Observable<BizMemberResponse> {
    return this.apiBusinessBizIdSwlBusinessManagersPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<BizMemberResponse>): BizMemberResponse => r.body)
    );
  }

  /** Path part for operation `apiBusinessBizIdNonSwlBusinessManagersPost()` */
  static readonly ApiBusinessBizIdNonSwlBusinessManagersPostPath = '/api/business/{bizId}/non-swl-business-managers';

  /**
   * Create Biz non-swl business manager.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiBusinessBizIdNonSwlBusinessManagersPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiBusinessBizIdNonSwlBusinessManagersPost$Response(params: ApiBusinessBizIdNonSwlBusinessManagersPost$Params, context?: HttpContext): Observable<StrictHttpResponse<BizMemberResponse>> {
    return apiBusinessBizIdNonSwlBusinessManagersPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Create Biz non-swl business manager.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiBusinessBizIdNonSwlBusinessManagersPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiBusinessBizIdNonSwlBusinessManagersPost(params: ApiBusinessBizIdNonSwlBusinessManagersPost$Params, context?: HttpContext): Observable<BizMemberResponse> {
    return this.apiBusinessBizIdNonSwlBusinessManagersPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<BizMemberResponse>): BizMemberResponse => r.body)
    );
  }

  /** Path part for operation `apiBusinessBizIdNonSwlBusinessManagersBizContactIdPut()` */
  static readonly ApiBusinessBizIdNonSwlBusinessManagersBizContactIdPutPath = '/api/business/{bizId}/non-swl-business-managers/{bizContactId}';

  /**
   * Update Non swl biz business manager.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiBusinessBizIdNonSwlBusinessManagersBizContactIdPut()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiBusinessBizIdNonSwlBusinessManagersBizContactIdPut$Response(params: ApiBusinessBizIdNonSwlBusinessManagersBizContactIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<BizMemberResponse>> {
    return apiBusinessBizIdNonSwlBusinessManagersBizContactIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * Update Non swl biz business manager.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiBusinessBizIdNonSwlBusinessManagersBizContactIdPut$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiBusinessBizIdNonSwlBusinessManagersBizContactIdPut(params: ApiBusinessBizIdNonSwlBusinessManagersBizContactIdPut$Params, context?: HttpContext): Observable<BizMemberResponse> {
    return this.apiBusinessBizIdNonSwlBusinessManagersBizContactIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<BizMemberResponse>): BizMemberResponse => r.body)
    );
  }

  /** Path part for operation `apiBusinessBizIdMembersBizContactIdDelete()` */
  static readonly ApiBusinessBizIdMembersBizContactIdDeletePath = '/api/business/{bizId}/members/{bizContactId}';

  /**
   * Delete Biz member.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiBusinessBizIdMembersBizContactIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiBusinessBizIdMembersBizContactIdDelete$Response(params: ApiBusinessBizIdMembersBizContactIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<ActionResult>> {
    return apiBusinessBizIdMembersBizContactIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete Biz member.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiBusinessBizIdMembersBizContactIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiBusinessBizIdMembersBizContactIdDelete(params: ApiBusinessBizIdMembersBizContactIdDelete$Params, context?: HttpContext): Observable<ActionResult> {
    return this.apiBusinessBizIdMembersBizContactIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<ActionResult>): ActionResult => r.body)
    );
  }

  /** Path part for operation `apiBusinessLicenceApplicationStakeholderInvitationBizContactIdGet()` */
  static readonly ApiBusinessLicenceApplicationStakeholderInvitationBizContactIdGetPath = '/api/business-licence-application/stakeholder-invitation/{bizContactId}';

  /**
   * Create stakeholder (controlling member, biz manager) crc invitation for this biz contact
   * Example: http://localhost:5114/api/business-licence-application/controlling-member-invitation/123?inviteType=Update.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiBusinessLicenceApplicationStakeholderInvitationBizContactIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiBusinessLicenceApplicationStakeholderInvitationBizContactIdGet$Response(params: ApiBusinessLicenceApplicationStakeholderInvitationBizContactIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<StakeholderInvitesCreateResponse>> {
    return apiBusinessLicenceApplicationStakeholderInvitationBizContactIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Create stakeholder (controlling member, biz manager) crc invitation for this biz contact
   * Example: http://localhost:5114/api/business-licence-application/controlling-member-invitation/123?inviteType=Update.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiBusinessLicenceApplicationStakeholderInvitationBizContactIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiBusinessLicenceApplicationStakeholderInvitationBizContactIdGet(params: ApiBusinessLicenceApplicationStakeholderInvitationBizContactIdGet$Params, context?: HttpContext): Observable<StakeholderInvitesCreateResponse> {
    return this.apiBusinessLicenceApplicationStakeholderInvitationBizContactIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<StakeholderInvitesCreateResponse>): StakeholderInvitesCreateResponse => r.body)
    );
  }

  /** Path part for operation `apiStakeholdersInvitesPost()` */
  static readonly ApiStakeholdersInvitesPostPath = '/api/stakeholders/invites';

  /**
   * Verify if the current stakeholder (controlling member, biz manager) crc application invite is correct, and return needed info.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiStakeholdersInvitesPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiStakeholdersInvitesPost$Response(params: ApiStakeholdersInvitesPost$Params, context?: HttpContext): Observable<StrictHttpResponse<StakeholderAppInviteVerifyResponse>> {
    return apiStakeholdersInvitesPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Verify if the current stakeholder (controlling member, biz manager) crc application invite is correct, and return needed info.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiStakeholdersInvitesPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiStakeholdersInvitesPost(params: ApiStakeholdersInvitesPost$Params, context?: HttpContext): Observable<StakeholderAppInviteVerifyResponse> {
    return this.apiStakeholdersInvitesPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<StakeholderAppInviteVerifyResponse>): StakeholderAppInviteVerifyResponse => r.body)
    );
  }

}
