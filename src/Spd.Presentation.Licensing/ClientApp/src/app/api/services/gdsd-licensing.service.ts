/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiGdsdTeamAppAnonymousSubmitPost } from '../fn/gdsd-licensing/api-gdsd-team-app-anonymous-submit-post';
import { ApiGdsdTeamAppAnonymousSubmitPost$Params } from '../fn/gdsd-licensing/api-gdsd-team-app-anonymous-submit-post';
import { apiGdsdTeamAppCertificationAppIdGet } from '../fn/gdsd-licensing/api-gdsd-team-app-certification-app-id-get';
import { ApiGdsdTeamAppCertificationAppIdGet$Params } from '../fn/gdsd-licensing/api-gdsd-team-app-certification-app-id-get';
import { apiGdsdTeamAppGet } from '../fn/gdsd-licensing/api-gdsd-team-app-get';
import { ApiGdsdTeamAppGet$Params } from '../fn/gdsd-licensing/api-gdsd-team-app-get';
import { apiGdsdTeamAppPost } from '../fn/gdsd-licensing/api-gdsd-team-app-post';
import { ApiGdsdTeamAppPost$Params } from '../fn/gdsd-licensing/api-gdsd-team-app-post';
import { apiGdsdTeamAppSubmitPost } from '../fn/gdsd-licensing/api-gdsd-team-app-submit-post';
import { ApiGdsdTeamAppSubmitPost$Params } from '../fn/gdsd-licensing/api-gdsd-team-app-submit-post';
import { GdsdAppCommandResponse } from '../models/gdsd-app-command-response';
import { GdsdTeamLicenceAppResponse } from '../models/gdsd-team-licence-app-response';

@Injectable({ providedIn: 'root' })
export class GdsdLicensingService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiGdsdTeamAppGet()` */
  static readonly ApiGdsdTeamAppGetPath = '/api/gdsd-team-app';

  /**
   * Get anonymous Permit Application, thus the licenceAppId is retrieved from cookies.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGdsdTeamAppGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGdsdTeamAppGet$Response(params?: ApiGdsdTeamAppGet$Params, context?: HttpContext): Observable<StrictHttpResponse<GdsdTeamLicenceAppResponse>> {
    return apiGdsdTeamAppGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get anonymous Permit Application, thus the licenceAppId is retrieved from cookies.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGdsdTeamAppGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGdsdTeamAppGet(params?: ApiGdsdTeamAppGet$Params, context?: HttpContext): Observable<GdsdTeamLicenceAppResponse> {
    return this.apiGdsdTeamAppGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<GdsdTeamLicenceAppResponse>): GdsdTeamLicenceAppResponse => r.body)
    );
  }

  /** Path part for operation `apiGdsdTeamAppPost()` */
  static readonly ApiGdsdTeamAppPostPath = '/api/gdsd-team-app';

  /**
   * Create/partial save gdsd team certification application.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGdsdTeamAppPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiGdsdTeamAppPost$Response(params: ApiGdsdTeamAppPost$Params, context?: HttpContext): Observable<StrictHttpResponse<GdsdAppCommandResponse>> {
    return apiGdsdTeamAppPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Create/partial save gdsd team certification application.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGdsdTeamAppPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiGdsdTeamAppPost(params: ApiGdsdTeamAppPost$Params, context?: HttpContext): Observable<GdsdAppCommandResponse> {
    return this.apiGdsdTeamAppPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<GdsdAppCommandResponse>): GdsdAppCommandResponse => r.body)
    );
  }

  /** Path part for operation `apiGdsdTeamAppCertificationAppIdGet()` */
  static readonly ApiGdsdTeamAppCertificationAppIdGetPath = '/api/gdsd-team-app/{certificationAppId}';

  /**
   * Get gdsd team certification application.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGdsdTeamAppCertificationAppIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGdsdTeamAppCertificationAppIdGet$Response(params: ApiGdsdTeamAppCertificationAppIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<GdsdTeamLicenceAppResponse>> {
    return apiGdsdTeamAppCertificationAppIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get gdsd team certification application.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGdsdTeamAppCertificationAppIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGdsdTeamAppCertificationAppIdGet(params: ApiGdsdTeamAppCertificationAppIdGet$Params, context?: HttpContext): Observable<GdsdTeamLicenceAppResponse> {
    return this.apiGdsdTeamAppCertificationAppIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<GdsdTeamLicenceAppResponse>): GdsdTeamLicenceAppResponse => r.body)
    );
  }

  /** Path part for operation `apiGdsdTeamAppSubmitPost()` */
  static readonly ApiGdsdTeamAppSubmitPostPath = '/api/gdsd-team-app/submit';

  /**
   * Submit new gdsd team Application authenticated with bcsc.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGdsdTeamAppSubmitPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiGdsdTeamAppSubmitPost$Response(params: ApiGdsdTeamAppSubmitPost$Params, context?: HttpContext): Observable<StrictHttpResponse<GdsdAppCommandResponse>> {
    return apiGdsdTeamAppSubmitPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Submit new gdsd team Application authenticated with bcsc.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGdsdTeamAppSubmitPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiGdsdTeamAppSubmitPost(params: ApiGdsdTeamAppSubmitPost$Params, context?: HttpContext): Observable<GdsdAppCommandResponse> {
    return this.apiGdsdTeamAppSubmitPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<GdsdAppCommandResponse>): GdsdAppCommandResponse => r.body)
    );
  }

  /** Path part for operation `apiGdsdTeamAppAnonymousSubmitPost()` */
  static readonly ApiGdsdTeamAppAnonymousSubmitPostPath = '/api/gdsd-team-app/anonymous/submit';

  /**
   * Submit GDSD Team Certification application Anonymously
   * After fe done with the uploading files, then fe do post with json payload, inside payload, it needs to contain an array of keycode for the files.
   * The session keycode is stored in the cookies.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGdsdTeamAppAnonymousSubmitPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiGdsdTeamAppAnonymousSubmitPost$Response(params?: ApiGdsdTeamAppAnonymousSubmitPost$Params, context?: HttpContext): Observable<StrictHttpResponse<GdsdAppCommandResponse>> {
    return apiGdsdTeamAppAnonymousSubmitPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Submit GDSD Team Certification application Anonymously
   * After fe done with the uploading files, then fe do post with json payload, inside payload, it needs to contain an array of keycode for the files.
   * The session keycode is stored in the cookies.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGdsdTeamAppAnonymousSubmitPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiGdsdTeamAppAnonymousSubmitPost(params?: ApiGdsdTeamAppAnonymousSubmitPost$Params, context?: HttpContext): Observable<GdsdAppCommandResponse> {
    return this.apiGdsdTeamAppAnonymousSubmitPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<GdsdAppCommandResponse>): GdsdAppCommandResponse => r.body)
    );
  }

}
