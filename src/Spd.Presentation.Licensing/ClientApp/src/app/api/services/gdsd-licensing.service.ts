/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiGdsdTeamAppAnonymousChangePost } from '../fn/gdsd-licensing/api-gdsd-team-app-anonymous-change-post';
import { ApiGdsdTeamAppAnonymousChangePost$Params } from '../fn/gdsd-licensing/api-gdsd-team-app-anonymous-change-post';
import { apiGdsdTeamAppAnonymousSubmitPost } from '../fn/gdsd-licensing/api-gdsd-team-app-anonymous-submit-post';
import { ApiGdsdTeamAppAnonymousSubmitPost$Params } from '../fn/gdsd-licensing/api-gdsd-team-app-anonymous-submit-post';
import { apiGdsdTeamAppChangePost } from '../fn/gdsd-licensing/api-gdsd-team-app-change-post';
import { ApiGdsdTeamAppChangePost$Params } from '../fn/gdsd-licensing/api-gdsd-team-app-change-post';
import { apiGdsdTeamAppLicenceAppIdGet } from '../fn/gdsd-licensing/api-gdsd-team-app-licence-app-id-get';
import { ApiGdsdTeamAppLicenceAppIdGet$Params } from '../fn/gdsd-licensing/api-gdsd-team-app-licence-app-id-get';
import { apiGdsdTeamAppPost } from '../fn/gdsd-licensing/api-gdsd-team-app-post';
import { ApiGdsdTeamAppPost$Params } from '../fn/gdsd-licensing/api-gdsd-team-app-post';
import { apiGdsdTeamAppSubmitPost } from '../fn/gdsd-licensing/api-gdsd-team-app-submit-post';
import { ApiGdsdTeamAppSubmitPost$Params } from '../fn/gdsd-licensing/api-gdsd-team-app-submit-post';
import { GdsdAppCommandResponse } from '../models/gdsd-app-command-response';
import { GdsdTeamLicenceAppResponse } from '../models/gdsd-team-licence-app-response';

@Injectable({ providedIn: 'root' })
export class GdsdLicensingService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiGdsdTeamAppPost()` */
  static readonly ApiGdsdTeamAppPostPath = '/api/gdsd-team-app';

  /**
   * Create/partial save gdsd team certification application.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGdsdTeamAppPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiGdsdTeamAppPost$Response(params: ApiGdsdTeamAppPost$Params, context?: HttpContext): Observable<StrictHttpResponse<GdsdAppCommandResponse>> {
    return apiGdsdTeamAppPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Create/partial save gdsd team certification application.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGdsdTeamAppPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiGdsdTeamAppPost(params: ApiGdsdTeamAppPost$Params, context?: HttpContext): Observable<GdsdAppCommandResponse> {
    return this.apiGdsdTeamAppPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<GdsdAppCommandResponse>): GdsdAppCommandResponse => r.body)
    );
  }

  /** Path part for operation `apiGdsdTeamAppLicenceAppIdGet()` */
  static readonly ApiGdsdTeamAppLicenceAppIdGetPath = '/api/gdsd-team-app/{licenceAppId}';

  /**
   * Get gdsd team certification application.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGdsdTeamAppLicenceAppIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGdsdTeamAppLicenceAppIdGet$Response(params: ApiGdsdTeamAppLicenceAppIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<GdsdTeamLicenceAppResponse>> {
    return apiGdsdTeamAppLicenceAppIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get gdsd team certification application.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGdsdTeamAppLicenceAppIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGdsdTeamAppLicenceAppIdGet(params: ApiGdsdTeamAppLicenceAppIdGet$Params, context?: HttpContext): Observable<GdsdTeamLicenceAppResponse> {
    return this.apiGdsdTeamAppLicenceAppIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<GdsdTeamLicenceAppResponse>): GdsdTeamLicenceAppResponse => r.body)
    );
  }

  /** Path part for operation `apiGdsdTeamAppSubmitPost()` */
  static readonly ApiGdsdTeamAppSubmitPostPath = '/api/gdsd-team-app/submit';

  /**
   * Submit new gdsd team Application authenticated with bcsc.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGdsdTeamAppSubmitPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiGdsdTeamAppSubmitPost$Response(params: ApiGdsdTeamAppSubmitPost$Params, context?: HttpContext): Observable<StrictHttpResponse<GdsdAppCommandResponse>> {
    return apiGdsdTeamAppSubmitPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Submit new gdsd team Application authenticated with bcsc.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGdsdTeamAppSubmitPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiGdsdTeamAppSubmitPost(params: ApiGdsdTeamAppSubmitPost$Params, context?: HttpContext): Observable<GdsdAppCommandResponse> {
    return this.apiGdsdTeamAppSubmitPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<GdsdAppCommandResponse>): GdsdAppCommandResponse => r.body)
    );
  }

  /** Path part for operation `apiGdsdTeamAppChangePost()` */
  static readonly ApiGdsdTeamAppChangePostPath = '/api/gdsd-team-app/change';

  /**
   * Submit GDSD Application for authenticated users, supports only: renewal and replace
   * After fe done with the uploading files, then fe do post with json payload, inside payload, it needs to contain an array of keycode for the files.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGdsdTeamAppChangePost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiGdsdTeamAppChangePost$Response(params?: ApiGdsdTeamAppChangePost$Params, context?: HttpContext): Observable<StrictHttpResponse<GdsdAppCommandResponse>> {
    return apiGdsdTeamAppChangePost(this.http, this.rootUrl, params, context);
  }

  /**
   * Submit GDSD Application for authenticated users, supports only: renewal and replace
   * After fe done with the uploading files, then fe do post with json payload, inside payload, it needs to contain an array of keycode for the files.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGdsdTeamAppChangePost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiGdsdTeamAppChangePost(params?: ApiGdsdTeamAppChangePost$Params, context?: HttpContext): Observable<GdsdAppCommandResponse> {
    return this.apiGdsdTeamAppChangePost$Response(params, context).pipe(
      map((r: StrictHttpResponse<GdsdAppCommandResponse>): GdsdAppCommandResponse => r.body)
    );
  }

  /** Path part for operation `apiGdsdTeamAppAnonymousSubmitPost()` */
  static readonly ApiGdsdTeamAppAnonymousSubmitPostPath = '/api/gdsd-team-app/anonymous/submit';

  /**
   * Submit/new GDSD Team Certification application Anonymously
   * After fe done with the uploading files, then fe do post with json payload, inside payload, it needs to contain an array of keycode for the files.
   * The session keycode is stored in the cookies.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGdsdTeamAppAnonymousSubmitPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiGdsdTeamAppAnonymousSubmitPost$Response(params?: ApiGdsdTeamAppAnonymousSubmitPost$Params, context?: HttpContext): Observable<StrictHttpResponse<GdsdAppCommandResponse>> {
    return apiGdsdTeamAppAnonymousSubmitPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Submit/new GDSD Team Certification application Anonymously
   * After fe done with the uploading files, then fe do post with json payload, inside payload, it needs to contain an array of keycode for the files.
   * The session keycode is stored in the cookies.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGdsdTeamAppAnonymousSubmitPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiGdsdTeamAppAnonymousSubmitPost(params?: ApiGdsdTeamAppAnonymousSubmitPost$Params, context?: HttpContext): Observable<GdsdAppCommandResponse> {
    return this.apiGdsdTeamAppAnonymousSubmitPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<GdsdAppCommandResponse>): GdsdAppCommandResponse => r.body)
    );
  }

  /** Path part for operation `apiGdsdTeamAppAnonymousChangePost()` */
  static readonly ApiGdsdTeamAppAnonymousChangePostPath = '/api/gdsd-team-app/anonymous/change';

  /**
   * Submit/new GDSD Team Certification application Anonymously
   * After fe done with the uploading files, then fe do post with json payload, inside payload, it needs to contain an array of keycode for the files.
   * The session keycode is stored in the cookies.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGdsdTeamAppAnonymousChangePost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiGdsdTeamAppAnonymousChangePost$Response(params?: ApiGdsdTeamAppAnonymousChangePost$Params, context?: HttpContext): Observable<StrictHttpResponse<GdsdAppCommandResponse>> {
    return apiGdsdTeamAppAnonymousChangePost(this.http, this.rootUrl, params, context);
  }

  /**
   * Submit/new GDSD Team Certification application Anonymously
   * After fe done with the uploading files, then fe do post with json payload, inside payload, it needs to contain an array of keycode for the files.
   * The session keycode is stored in the cookies.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGdsdTeamAppAnonymousChangePost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiGdsdTeamAppAnonymousChangePost(params?: ApiGdsdTeamAppAnonymousChangePost$Params, context?: HttpContext): Observable<GdsdAppCommandResponse> {
    return this.apiGdsdTeamAppAnonymousChangePost$Response(params, context).pipe(
      map((r: StrictHttpResponse<GdsdAppCommandResponse>): GdsdAppCommandResponse => r.body)
    );
  }

}
