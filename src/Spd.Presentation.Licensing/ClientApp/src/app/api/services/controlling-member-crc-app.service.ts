/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiControllingMemberCrcApplicationsAnonymousSubmitPost } from '../fn/controlling-member-crc-app/api-controlling-member-crc-applications-anonymous-submit-post';
import { ApiControllingMemberCrcApplicationsAnonymousSubmitPost$Params } from '../fn/controlling-member-crc-app/api-controlling-member-crc-applications-anonymous-submit-post';
import { apiControllingMemberCrcApplicationsAnonymousUpdatePost } from '../fn/controlling-member-crc-app/api-controlling-member-crc-applications-anonymous-update-post';
import { ApiControllingMemberCrcApplicationsAnonymousUpdatePost$Params } from '../fn/controlling-member-crc-app/api-controlling-member-crc-applications-anonymous-update-post';
import { apiControllingMemberCrcApplicationsOriginalAppIdGet } from '../fn/controlling-member-crc-app/api-controlling-member-crc-applications-original-app-id-get';
import { ApiControllingMemberCrcApplicationsOriginalAppIdGet$Params } from '../fn/controlling-member-crc-app/api-controlling-member-crc-applications-original-app-id-get';
import { apiControllingMemberCrcApplicationsPost } from '../fn/controlling-member-crc-app/api-controlling-member-crc-applications-post';
import { ApiControllingMemberCrcApplicationsPost$Params } from '../fn/controlling-member-crc-app/api-controlling-member-crc-applications-post';
import { apiControllingMemberCrcApplicationsSubmitPost } from '../fn/controlling-member-crc-app/api-controlling-member-crc-applications-submit-post';
import { ApiControllingMemberCrcApplicationsSubmitPost$Params } from '../fn/controlling-member-crc-app/api-controlling-member-crc-applications-submit-post';
import { apiControllingMemberCrcApplicationsUpdatePost } from '../fn/controlling-member-crc-app/api-controlling-member-crc-applications-update-post';
import { ApiControllingMemberCrcApplicationsUpdatePost$Params } from '../fn/controlling-member-crc-app/api-controlling-member-crc-applications-update-post';
import { ControllingMemberCrcAppCommandResponse } from '../models/controlling-member-crc-app-command-response';
import { ControllingMemberCrcAppResponse } from '../models/controlling-member-crc-app-response';

@Injectable({ providedIn: 'root' })
export class ControllingMemberCrcAppService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiControllingMemberCrcApplicationsOriginalAppIdGet()` */
  static readonly ApiControllingMemberCrcApplicationsOriginalAppIdGetPath = '/api/controlling-member-crc-applications/{originalAppId}';

  /**
   * Get Controlling member CRC Application.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiControllingMemberCrcApplicationsOriginalAppIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiControllingMemberCrcApplicationsOriginalAppIdGet$Response(params: ApiControllingMemberCrcApplicationsOriginalAppIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<ControllingMemberCrcAppResponse>> {
    return apiControllingMemberCrcApplicationsOriginalAppIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get Controlling member CRC Application.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiControllingMemberCrcApplicationsOriginalAppIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiControllingMemberCrcApplicationsOriginalAppIdGet(params: ApiControllingMemberCrcApplicationsOriginalAppIdGet$Params, context?: HttpContext): Observable<ControllingMemberCrcAppResponse> {
    return this.apiControllingMemberCrcApplicationsOriginalAppIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<ControllingMemberCrcAppResponse>): ControllingMemberCrcAppResponse => r.body)
    );
  }

  /** Path part for operation `apiControllingMemberCrcApplicationsPost()` */
  static readonly ApiControllingMemberCrcApplicationsPostPath = '/api/controlling-member-crc-applications';

  /**
   * Create or save Controlling member CRC Application.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiControllingMemberCrcApplicationsPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiControllingMemberCrcApplicationsPost$Response(params: ApiControllingMemberCrcApplicationsPost$Params, context?: HttpContext): Observable<StrictHttpResponse<ControllingMemberCrcAppCommandResponse>> {
    return apiControllingMemberCrcApplicationsPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Create or save Controlling member CRC Application.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiControllingMemberCrcApplicationsPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiControllingMemberCrcApplicationsPost(params: ApiControllingMemberCrcApplicationsPost$Params, context?: HttpContext): Observable<ControllingMemberCrcAppCommandResponse> {
    return this.apiControllingMemberCrcApplicationsPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<ControllingMemberCrcAppCommandResponse>): ControllingMemberCrcAppCommandResponse => r.body)
    );
  }

  /** Path part for operation `apiControllingMemberCrcApplicationsSubmitPost()` */
  static readonly ApiControllingMemberCrcApplicationsSubmitPostPath = '/api/controlling-member-crc-applications/submit';

  /**
   * Submit Controlling Member Crc New Application
   * authenticated.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiControllingMemberCrcApplicationsSubmitPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiControllingMemberCrcApplicationsSubmitPost$Response(params: ApiControllingMemberCrcApplicationsSubmitPost$Params, context?: HttpContext): Observable<StrictHttpResponse<ControllingMemberCrcAppCommandResponse>> {
    return apiControllingMemberCrcApplicationsSubmitPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Submit Controlling Member Crc New Application
   * authenticated.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiControllingMemberCrcApplicationsSubmitPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiControllingMemberCrcApplicationsSubmitPost(params: ApiControllingMemberCrcApplicationsSubmitPost$Params, context?: HttpContext): Observable<ControllingMemberCrcAppCommandResponse> {
    return this.apiControllingMemberCrcApplicationsSubmitPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<ControllingMemberCrcAppCommandResponse>): ControllingMemberCrcAppCommandResponse => r.body)
    );
  }

  /** Path part for operation `apiControllingMemberCrcApplicationsUpdatePost()` */
  static readonly ApiControllingMemberCrcApplicationsUpdatePostPath = '/api/controlling-member-crc-applications/update';

  /**
   * Submit an update for Controlling member crc application for authenticated users,
   * After fe done with the uploading files, then fe do post with json payload, inside payload, it needs to contain an array of keycode for the files.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiControllingMemberCrcApplicationsUpdatePost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiControllingMemberCrcApplicationsUpdatePost$Response(params?: ApiControllingMemberCrcApplicationsUpdatePost$Params, context?: HttpContext): Observable<StrictHttpResponse<ControllingMemberCrcAppCommandResponse>> {
    return apiControllingMemberCrcApplicationsUpdatePost(this.http, this.rootUrl, params, context);
  }

  /**
   * Submit an update for Controlling member crc application for authenticated users,
   * After fe done with the uploading files, then fe do post with json payload, inside payload, it needs to contain an array of keycode for the files.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiControllingMemberCrcApplicationsUpdatePost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiControllingMemberCrcApplicationsUpdatePost(params?: ApiControllingMemberCrcApplicationsUpdatePost$Params, context?: HttpContext): Observable<ControllingMemberCrcAppCommandResponse> {
    return this.apiControllingMemberCrcApplicationsUpdatePost$Response(params, context).pipe(
      map((r: StrictHttpResponse<ControllingMemberCrcAppCommandResponse>): ControllingMemberCrcAppCommandResponse => r.body)
    );
  }

  /** Path part for operation `apiControllingMemberCrcApplicationsAnonymousSubmitPost()` */
  static readonly ApiControllingMemberCrcApplicationsAnonymousSubmitPostPath = '/api/controlling-member-crc-applications/anonymous/submit';

  /**
   * Submit Controlling Member Crc New Application Anonymously.
   * After fe done with the uploading files, then fe do post with json payload, inside payload, it needs to contain an array of keycode for the files.
   * anonymous.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiControllingMemberCrcApplicationsAnonymousSubmitPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiControllingMemberCrcApplicationsAnonymousSubmitPost$Response(params: ApiControllingMemberCrcApplicationsAnonymousSubmitPost$Params, context?: HttpContext): Observable<StrictHttpResponse<ControllingMemberCrcAppCommandResponse>> {
    return apiControllingMemberCrcApplicationsAnonymousSubmitPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Submit Controlling Member Crc New Application Anonymously.
   * After fe done with the uploading files, then fe do post with json payload, inside payload, it needs to contain an array of keycode for the files.
   * anonymous.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiControllingMemberCrcApplicationsAnonymousSubmitPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiControllingMemberCrcApplicationsAnonymousSubmitPost(params: ApiControllingMemberCrcApplicationsAnonymousSubmitPost$Params, context?: HttpContext): Observable<ControllingMemberCrcAppCommandResponse> {
    return this.apiControllingMemberCrcApplicationsAnonymousSubmitPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<ControllingMemberCrcAppCommandResponse>): ControllingMemberCrcAppCommandResponse => r.body)
    );
  }

  /** Path part for operation `apiControllingMemberCrcApplicationsAnonymousUpdatePost()` */
  static readonly ApiControllingMemberCrcApplicationsAnonymousUpdatePostPath = '/api/controlling-member-crc-applications/anonymous/update';

  /**
   * Submit an update for Controlling Member Crc Application Anonymously
   * After fe done with the uploading files, then fe do post with json payload, inside payload, it needs to contain an array of keycode for the files.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiControllingMemberCrcApplicationsAnonymousUpdatePost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiControllingMemberCrcApplicationsAnonymousUpdatePost$Response(params: ApiControllingMemberCrcApplicationsAnonymousUpdatePost$Params, context?: HttpContext): Observable<StrictHttpResponse<ControllingMemberCrcAppCommandResponse>> {
    return apiControllingMemberCrcApplicationsAnonymousUpdatePost(this.http, this.rootUrl, params, context);
  }

  /**
   * Submit an update for Controlling Member Crc Application Anonymously
   * After fe done with the uploading files, then fe do post with json payload, inside payload, it needs to contain an array of keycode for the files.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiControllingMemberCrcApplicationsAnonymousUpdatePost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiControllingMemberCrcApplicationsAnonymousUpdatePost(params: ApiControllingMemberCrcApplicationsAnonymousUpdatePost$Params, context?: HttpContext): Observable<ControllingMemberCrcAppCommandResponse> {
    return this.apiControllingMemberCrcApplicationsAnonymousUpdatePost$Response(params, context).pipe(
      map((r: StrictHttpResponse<ControllingMemberCrcAppCommandResponse>): ControllingMemberCrcAppCommandResponse => r.body)
    );
  }

}
