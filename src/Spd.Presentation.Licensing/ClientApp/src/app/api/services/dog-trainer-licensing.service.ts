/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiDogTrainerAppAnonymousChangePost } from '../fn/dog-trainer-licensing/api-dog-trainer-app-anonymous-change-post';
import { ApiDogTrainerAppAnonymousChangePost$Params } from '../fn/dog-trainer-licensing/api-dog-trainer-app-anonymous-change-post';
import { apiDogTrainerAppAnonymousSubmitPost } from '../fn/dog-trainer-licensing/api-dog-trainer-app-anonymous-submit-post';
import { ApiDogTrainerAppAnonymousSubmitPost$Params } from '../fn/dog-trainer-licensing/api-dog-trainer-app-anonymous-submit-post';
import { apiDogTrainerAppGet } from '../fn/dog-trainer-licensing/api-dog-trainer-app-get';
import { ApiDogTrainerAppGet$Params } from '../fn/dog-trainer-licensing/api-dog-trainer-app-get';
import { DogTrainerAppCommandResponse } from '../models/dog-trainer-app-command-response';
import { DogTrainerAppResponse } from '../models/dog-trainer-app-response';

@Injectable({ providedIn: 'root' })
export class DogTrainerLicensingService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiDogTrainerAppAnonymousSubmitPost()` */
  static readonly ApiDogTrainerAppAnonymousSubmitPostPath = '/api/dog-trainer-app/anonymous/submit';

  /**
   * Submit/new Dog Trainer Certification application Anonymously
   * After fe done with the uploading files, then fe do post with json payload, inside payload, it needs to contain an array of keycode for the files.
   * The session keycode is stored in the cookies.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiDogTrainerAppAnonymousSubmitPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiDogTrainerAppAnonymousSubmitPost$Response(params?: ApiDogTrainerAppAnonymousSubmitPost$Params, context?: HttpContext): Observable<StrictHttpResponse<DogTrainerAppCommandResponse>> {
    return apiDogTrainerAppAnonymousSubmitPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Submit/new Dog Trainer Certification application Anonymously
   * After fe done with the uploading files, then fe do post with json payload, inside payload, it needs to contain an array of keycode for the files.
   * The session keycode is stored in the cookies.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiDogTrainerAppAnonymousSubmitPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiDogTrainerAppAnonymousSubmitPost(params?: ApiDogTrainerAppAnonymousSubmitPost$Params, context?: HttpContext): Observable<DogTrainerAppCommandResponse> {
    return this.apiDogTrainerAppAnonymousSubmitPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<DogTrainerAppCommandResponse>): DogTrainerAppCommandResponse => r.body)
    );
  }

  /** Path part for operation `apiDogTrainerAppAnonymousChangePost()` */
  static readonly ApiDogTrainerAppAnonymousChangePostPath = '/api/dog-trainer-app/anonymous/change';

  /**
   * Renew, Replace Dog Trainer application Anonymously
   * After fe done with the uploading files, then fe do post with json payload, inside payload, it needs to contain an array of keycode for the files.
   * The session keycode is stored in the cookies.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiDogTrainerAppAnonymousChangePost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiDogTrainerAppAnonymousChangePost$Response(params?: ApiDogTrainerAppAnonymousChangePost$Params, context?: HttpContext): Observable<StrictHttpResponse<DogTrainerAppCommandResponse>> {
    return apiDogTrainerAppAnonymousChangePost(this.http, this.rootUrl, params, context);
  }

  /**
   * Renew, Replace Dog Trainer application Anonymously
   * After fe done with the uploading files, then fe do post with json payload, inside payload, it needs to contain an array of keycode for the files.
   * The session keycode is stored in the cookies.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiDogTrainerAppAnonymousChangePost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiDogTrainerAppAnonymousChangePost(params?: ApiDogTrainerAppAnonymousChangePost$Params, context?: HttpContext): Observable<DogTrainerAppCommandResponse> {
    return this.apiDogTrainerAppAnonymousChangePost$Response(params, context).pipe(
      map((r: StrictHttpResponse<DogTrainerAppCommandResponse>): DogTrainerAppCommandResponse => r.body)
    );
  }

  /** Path part for operation `apiDogTrainerAppGet()` */
  static readonly ApiDogTrainerAppGetPath = '/api/dog-trainer-app';

  /**
   * Get Security Worker Licence Application, anonymous one, so, we get the licenceAppId from cookies.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiDogTrainerAppGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiDogTrainerAppGet$Response(params?: ApiDogTrainerAppGet$Params, context?: HttpContext): Observable<StrictHttpResponse<DogTrainerAppResponse>> {
    return apiDogTrainerAppGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get Security Worker Licence Application, anonymous one, so, we get the licenceAppId from cookies.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiDogTrainerAppGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiDogTrainerAppGet(params?: ApiDogTrainerAppGet$Params, context?: HttpContext): Observable<DogTrainerAppResponse> {
    return this.apiDogTrainerAppGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<DogTrainerAppResponse>): DogTrainerAppResponse => r.body)
    );
  }

}
