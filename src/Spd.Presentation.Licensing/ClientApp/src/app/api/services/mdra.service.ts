/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiMdraRegistrationGet } from '../fn/mdra/api-mdra-registration-get';
import { ApiMdraRegistrationGet$Params } from '../fn/mdra/api-mdra-registration-get';
import { apiMdraRegistrationsPost } from '../fn/mdra/api-mdra-registrations-post';
import { ApiMdraRegistrationsPost$Params } from '../fn/mdra/api-mdra-registrations-post';
import { MdraRegistrationCommandResponse } from '../models/mdra-registration-command-response';
import { MdraRegistrationResponse } from '../models/mdra-registration-response';

@Injectable({ providedIn: 'root' })
export class MdraService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiMdraRegistrationGet()` */
  static readonly ApiMdraRegistrationGetPath = '/api/mdra-registration';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiMdraRegistrationGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiMdraRegistrationGet$Response(params?: ApiMdraRegistrationGet$Params, context?: HttpContext): Observable<StrictHttpResponse<MdraRegistrationResponse>> {
    return apiMdraRegistrationGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiMdraRegistrationGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiMdraRegistrationGet(params?: ApiMdraRegistrationGet$Params, context?: HttpContext): Observable<MdraRegistrationResponse> {
    return this.apiMdraRegistrationGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<MdraRegistrationResponse>): MdraRegistrationResponse => r.body)
    );
  }

  /** Path part for operation `apiMdraRegistrationsPost()` */
  static readonly ApiMdraRegistrationsPostPath = '/api/mdra-registrations';

  /**
   * Submit MDRA registration Anonymously
   * After fe done with the uploading files, then fe do post with json payload, inside payload, it needs to contain an array of keycode for the files.
   * The session keycode is stored in the cookies.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiMdraRegistrationsPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiMdraRegistrationsPost$Response(params: ApiMdraRegistrationsPost$Params, context?: HttpContext): Observable<StrictHttpResponse<MdraRegistrationCommandResponse>> {
    return apiMdraRegistrationsPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Submit MDRA registration Anonymously
   * After fe done with the uploading files, then fe do post with json payload, inside payload, it needs to contain an array of keycode for the files.
   * The session keycode is stored in the cookies.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiMdraRegistrationsPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiMdraRegistrationsPost(params: ApiMdraRegistrationsPost$Params, context?: HttpContext): Observable<MdraRegistrationCommandResponse> {
    return this.apiMdraRegistrationsPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<MdraRegistrationCommandResponse>): MdraRegistrationCommandResponse => r.body)
    );
  }

}
