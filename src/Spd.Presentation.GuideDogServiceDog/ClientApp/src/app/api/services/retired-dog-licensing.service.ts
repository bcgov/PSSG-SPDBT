/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiRetiredDogAppAnonymousChangePost } from '../fn/retired-dog-licensing/api-retired-dog-app-anonymous-change-post';
import { ApiRetiredDogAppAnonymousChangePost$Params } from '../fn/retired-dog-licensing/api-retired-dog-app-anonymous-change-post';
import { apiRetiredDogAppAnonymousSubmitPost } from '../fn/retired-dog-licensing/api-retired-dog-app-anonymous-submit-post';
import { ApiRetiredDogAppAnonymousSubmitPost$Params } from '../fn/retired-dog-licensing/api-retired-dog-app-anonymous-submit-post';
import { apiRetiredDogAppChangePost } from '../fn/retired-dog-licensing/api-retired-dog-app-change-post';
import { ApiRetiredDogAppChangePost$Params } from '../fn/retired-dog-licensing/api-retired-dog-app-change-post';
import { apiRetiredDogAppLicenceAppIdGet } from '../fn/retired-dog-licensing/api-retired-dog-app-licence-app-id-get';
import { ApiRetiredDogAppLicenceAppIdGet$Params } from '../fn/retired-dog-licensing/api-retired-dog-app-licence-app-id-get';
import { apiRetiredDogAppPost } from '../fn/retired-dog-licensing/api-retired-dog-app-post';
import { ApiRetiredDogAppPost$Params } from '../fn/retired-dog-licensing/api-retired-dog-app-post';
import { apiRetiredDogAppSubmitPost } from '../fn/retired-dog-licensing/api-retired-dog-app-submit-post';
import { ApiRetiredDogAppSubmitPost$Params } from '../fn/retired-dog-licensing/api-retired-dog-app-submit-post';
import { RetiredDogAppCommandResponse } from '../models/retired-dog-app-command-response';
import { RetiredDogLicenceAppResponse } from '../models/retired-dog-licence-app-response';

@Injectable({ providedIn: 'root' })
export class RetiredDogLicensingService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiRetiredDogAppPost()` */
  static readonly ApiRetiredDogAppPostPath = '/api/retired-dog-app';

  /**
   * Create/partial save retired dog certification application.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiRetiredDogAppPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiRetiredDogAppPost$Response(params: ApiRetiredDogAppPost$Params, context?: HttpContext): Observable<StrictHttpResponse<RetiredDogAppCommandResponse>> {
    return apiRetiredDogAppPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Create/partial save retired dog certification application.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiRetiredDogAppPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiRetiredDogAppPost(params: ApiRetiredDogAppPost$Params, context?: HttpContext): Observable<RetiredDogAppCommandResponse> {
    return this.apiRetiredDogAppPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<RetiredDogAppCommandResponse>): RetiredDogAppCommandResponse => r.body)
    );
  }

  /** Path part for operation `apiRetiredDogAppLicenceAppIdGet()` */
  static readonly ApiRetiredDogAppLicenceAppIdGetPath = '/api/retired-dog-app/{licenceAppId}';

  /**
   * Get retired dog certification application.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiRetiredDogAppLicenceAppIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiRetiredDogAppLicenceAppIdGet$Response(params: ApiRetiredDogAppLicenceAppIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<RetiredDogLicenceAppResponse>> {
    return apiRetiredDogAppLicenceAppIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get retired dog certification application.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiRetiredDogAppLicenceAppIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiRetiredDogAppLicenceAppIdGet(params: ApiRetiredDogAppLicenceAppIdGet$Params, context?: HttpContext): Observable<RetiredDogLicenceAppResponse> {
    return this.apiRetiredDogAppLicenceAppIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<RetiredDogLicenceAppResponse>): RetiredDogLicenceAppResponse => r.body)
    );
  }

  /** Path part for operation `apiRetiredDogAppSubmitPost()` */
  static readonly ApiRetiredDogAppSubmitPostPath = '/api/retired-dog-app/submit';

  /**
   * Submit new retired dog certification Application authenticated with bcsc.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiRetiredDogAppSubmitPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiRetiredDogAppSubmitPost$Response(params: ApiRetiredDogAppSubmitPost$Params, context?: HttpContext): Observable<StrictHttpResponse<RetiredDogAppCommandResponse>> {
    return apiRetiredDogAppSubmitPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Submit new retired dog certification Application authenticated with bcsc.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiRetiredDogAppSubmitPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiRetiredDogAppSubmitPost(params: ApiRetiredDogAppSubmitPost$Params, context?: HttpContext): Observable<RetiredDogAppCommandResponse> {
    return this.apiRetiredDogAppSubmitPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<RetiredDogAppCommandResponse>): RetiredDogAppCommandResponse => r.body)
    );
  }

  /** Path part for operation `apiRetiredDogAppChangePost()` */
  static readonly ApiRetiredDogAppChangePostPath = '/api/retired-dog-app/change';

  /**
   * Renew, Replace retired dog certification app
   * After fe done with the uploading files, then fe do post with json payload, inside payload, it needs to contain an array of keycode for the files.
   * The session keycode is stored in the cookies.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiRetiredDogAppChangePost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiRetiredDogAppChangePost$Response(params?: ApiRetiredDogAppChangePost$Params, context?: HttpContext): Observable<StrictHttpResponse<RetiredDogAppCommandResponse>> {
    return apiRetiredDogAppChangePost(this.http, this.rootUrl, params, context);
  }

  /**
   * Renew, Replace retired dog certification app
   * After fe done with the uploading files, then fe do post with json payload, inside payload, it needs to contain an array of keycode for the files.
   * The session keycode is stored in the cookies.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiRetiredDogAppChangePost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiRetiredDogAppChangePost(params?: ApiRetiredDogAppChangePost$Params, context?: HttpContext): Observable<RetiredDogAppCommandResponse> {
    return this.apiRetiredDogAppChangePost$Response(params, context).pipe(
      map((r: StrictHttpResponse<RetiredDogAppCommandResponse>): RetiredDogAppCommandResponse => r.body)
    );
  }

  /** Path part for operation `apiRetiredDogAppAnonymousSubmitPost()` */
  static readonly ApiRetiredDogAppAnonymousSubmitPostPath = '/api/retired-dog-app/anonymous/submit';

  /**
   * Submit/new retired dog certification application Anonymously
   * After fe done with the uploading files, then fe do post with json payload, inside payload, it needs to contain an array of keycode for the files.
   * The session keycode is stored in the cookies.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiRetiredDogAppAnonymousSubmitPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiRetiredDogAppAnonymousSubmitPost$Response(params?: ApiRetiredDogAppAnonymousSubmitPost$Params, context?: HttpContext): Observable<StrictHttpResponse<RetiredDogAppCommandResponse>> {
    return apiRetiredDogAppAnonymousSubmitPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Submit/new retired dog certification application Anonymously
   * After fe done with the uploading files, then fe do post with json payload, inside payload, it needs to contain an array of keycode for the files.
   * The session keycode is stored in the cookies.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiRetiredDogAppAnonymousSubmitPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiRetiredDogAppAnonymousSubmitPost(params?: ApiRetiredDogAppAnonymousSubmitPost$Params, context?: HttpContext): Observable<RetiredDogAppCommandResponse> {
    return this.apiRetiredDogAppAnonymousSubmitPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<RetiredDogAppCommandResponse>): RetiredDogAppCommandResponse => r.body)
    );
  }

  /** Path part for operation `apiRetiredDogAppAnonymousChangePost()` */
  static readonly ApiRetiredDogAppAnonymousChangePostPath = '/api/retired-dog-app/anonymous/change';

  /**
   * Renew, Replace retired dog certification application Anonymously
   * After fe done with the uploading files, then fe do post with json payload, inside payload, it needs to contain an array of keycode for the files.
   * The session keycode is stored in the cookies.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiRetiredDogAppAnonymousChangePost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiRetiredDogAppAnonymousChangePost$Response(params?: ApiRetiredDogAppAnonymousChangePost$Params, context?: HttpContext): Observable<StrictHttpResponse<RetiredDogAppCommandResponse>> {
    return apiRetiredDogAppAnonymousChangePost(this.http, this.rootUrl, params, context);
  }

  /**
   * Renew, Replace retired dog certification application Anonymously
   * After fe done with the uploading files, then fe do post with json payload, inside payload, it needs to contain an array of keycode for the files.
   * The session keycode is stored in the cookies.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiRetiredDogAppAnonymousChangePost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiRetiredDogAppAnonymousChangePost(params?: ApiRetiredDogAppAnonymousChangePost$Params, context?: HttpContext): Observable<RetiredDogAppCommandResponse> {
    return this.apiRetiredDogAppAnonymousChangePost$Response(params, context).pipe(
      map((r: StrictHttpResponse<RetiredDogAppCommandResponse>): RetiredDogAppCommandResponse => r.body)
    );
  }

}
