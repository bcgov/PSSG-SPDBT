/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiLicenceApplicationDocumentsAnonymousFilesPost } from '../fn/licence-app-document/api-licence-application-documents-anonymous-files-post';
import { ApiLicenceApplicationDocumentsAnonymousFilesPost$Params } from '../fn/licence-app-document/api-licence-application-documents-anonymous-files-post';
import { apiLicenceApplicationDocumentsAnonymousKeyCodePost } from '../fn/licence-app-document/api-licence-application-documents-anonymous-key-code-post';
import { ApiLicenceApplicationDocumentsAnonymousKeyCodePost$Params } from '../fn/licence-app-document/api-licence-application-documents-anonymous-key-code-post';
import { apiLicenceApplicationDocumentsFilesPost } from '../fn/licence-app-document/api-licence-application-documents-files-post';
import { ApiLicenceApplicationDocumentsFilesPost$Params } from '../fn/licence-app-document/api-licence-application-documents-files-post';
import { apiLicenceApplicationDocumentsLicenceAppIdFilesPost } from '../fn/licence-app-document/api-licence-application-documents-licence-app-id-files-post';
import { ApiLicenceApplicationDocumentsLicenceAppIdFilesPost$Params } from '../fn/licence-app-document/api-licence-application-documents-licence-app-id-files-post';
import { IActionResult } from '../models/i-action-result';
import { LicenceAppDocumentResponse } from '../models/licence-app-document-response';

@Injectable({ providedIn: 'root' })
export class LicenceAppDocumentService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiLicenceApplicationDocumentsLicenceAppIdFilesPost()` */
  static readonly ApiLicenceApplicationDocumentsLicenceAppIdFilesPostPath = '/api/licence-application-documents/{licenceAppId}/files';

  /**
   * Upload document files to transient storage.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiLicenceApplicationDocumentsLicenceAppIdFilesPost()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiLicenceApplicationDocumentsLicenceAppIdFilesPost$Response(params: ApiLicenceApplicationDocumentsLicenceAppIdFilesPost$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<LicenceAppDocumentResponse>>> {
    return apiLicenceApplicationDocumentsLicenceAppIdFilesPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Upload document files to transient storage.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiLicenceApplicationDocumentsLicenceAppIdFilesPost$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiLicenceApplicationDocumentsLicenceAppIdFilesPost(params: ApiLicenceApplicationDocumentsLicenceAppIdFilesPost$Params, context?: HttpContext): Observable<Array<LicenceAppDocumentResponse>> {
    return this.apiLicenceApplicationDocumentsLicenceAppIdFilesPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<LicenceAppDocumentResponse>>): Array<LicenceAppDocumentResponse> => r.body)
    );
  }

  /** Path part for operation `apiLicenceApplicationDocumentsFilesPost()` */
  static readonly ApiLicenceApplicationDocumentsFilesPostPath = '/api/licence-application-documents/files';

  /**
   * Uploading document files, save in cache.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiLicenceApplicationDocumentsFilesPost()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiLicenceApplicationDocumentsFilesPost$Response(params?: ApiLicenceApplicationDocumentsFilesPost$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return apiLicenceApplicationDocumentsFilesPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Uploading document files, save in cache.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiLicenceApplicationDocumentsFilesPost$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiLicenceApplicationDocumentsFilesPost(params?: ApiLicenceApplicationDocumentsFilesPost$Params, context?: HttpContext): Observable<string> {
    return this.apiLicenceApplicationDocumentsFilesPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `apiLicenceApplicationDocumentsAnonymousKeyCodePost()` */
  static readonly ApiLicenceApplicationDocumentsAnonymousKeyCodePostPath = '/api/licence-application-documents/anonymous/keyCode';

  /**
   * Upload first step: get a Guid code.
   * the keycode will be set in the cookies.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiLicenceApplicationDocumentsAnonymousKeyCodePost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiLicenceApplicationDocumentsAnonymousKeyCodePost$Response(params?: ApiLicenceApplicationDocumentsAnonymousKeyCodePost$Params, context?: HttpContext): Observable<StrictHttpResponse<IActionResult>> {
    return apiLicenceApplicationDocumentsAnonymousKeyCodePost(this.http, this.rootUrl, params, context);
  }

  /**
   * Upload first step: get a Guid code.
   * the keycode will be set in the cookies.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiLicenceApplicationDocumentsAnonymousKeyCodePost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiLicenceApplicationDocumentsAnonymousKeyCodePost(params?: ApiLicenceApplicationDocumentsAnonymousKeyCodePost$Params, context?: HttpContext): Observable<IActionResult> {
    return this.apiLicenceApplicationDocumentsAnonymousKeyCodePost$Response(params, context).pipe(
      map((r: StrictHttpResponse<IActionResult>): IActionResult => r.body)
    );
  }

  /** Path part for operation `apiLicenceApplicationDocumentsAnonymousFilesPost()` */
  static readonly ApiLicenceApplicationDocumentsAnonymousFilesPostPath = '/api/licence-application-documents/anonymous/files';

  /**
   * Upload document files, use the keyCode (in cookies) to upload files.
   * save files in cache, files are not connected to the application yet.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiLicenceApplicationDocumentsAnonymousFilesPost()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiLicenceApplicationDocumentsAnonymousFilesPost$Response(params?: ApiLicenceApplicationDocumentsAnonymousFilesPost$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return apiLicenceApplicationDocumentsAnonymousFilesPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Upload document files, use the keyCode (in cookies) to upload files.
   * save files in cache, files are not connected to the application yet.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiLicenceApplicationDocumentsAnonymousFilesPost$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiLicenceApplicationDocumentsAnonymousFilesPost(params?: ApiLicenceApplicationDocumentsAnonymousFilesPost$Params, context?: HttpContext): Observable<string> {
    return this.apiLicenceApplicationDocumentsAnonymousFilesPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

}
