/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { ActionResult } from '../models/action-result';
import { apiApplicantsApplicantIdDogCertificationApplicationsGet } from '../fn/licence-app/api-applicants-applicant-id-dog-certification-applications-get';
import { ApiApplicantsApplicantIdDogCertificationApplicationsGet$Params } from '../fn/licence-app/api-applicants-applicant-id-dog-certification-applications-get';
import { apiApplicationsAppIdDelete } from '../fn/licence-app/api-applications-app-id-delete';
import { ApiApplicationsAppIdDelete$Params } from '../fn/licence-app/api-applications-app-id-delete';
import { LicenceAppListResponse } from '../models/licence-app-list-response';

@Injectable({ providedIn: 'root' })
export class LicenceAppService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiApplicantsApplicantIdDogCertificationApplicationsGet()` */
  static readonly ApiApplicantsApplicantIdDogCertificationApplicationsGetPath = '/api/applicants/{applicantId}/dog-certification-applications';

  /**
   * Get List of draft or InProgress dog certification Application.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiApplicantsApplicantIdDogCertificationApplicationsGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiApplicantsApplicantIdDogCertificationApplicationsGet$Response(params: ApiApplicantsApplicantIdDogCertificationApplicationsGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<LicenceAppListResponse>>> {
    return apiApplicantsApplicantIdDogCertificationApplicationsGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get List of draft or InProgress dog certification Application.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiApplicantsApplicantIdDogCertificationApplicationsGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiApplicantsApplicantIdDogCertificationApplicationsGet(params: ApiApplicantsApplicantIdDogCertificationApplicationsGet$Params, context?: HttpContext): Observable<Array<LicenceAppListResponse>> {
    return this.apiApplicantsApplicantIdDogCertificationApplicationsGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<LicenceAppListResponse>>): Array<LicenceAppListResponse> => r.body)
    );
  }

  /** Path part for operation `apiApplicationsAppIdDelete()` */
  static readonly ApiApplicationsAppIdDeletePath = '/api/applications/{appId}';

  /**
   * Cancel Draft Application.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiApplicationsAppIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiApplicationsAppIdDelete$Response(params: ApiApplicationsAppIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<ActionResult>> {
    return apiApplicationsAppIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Cancel Draft Application.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiApplicationsAppIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiApplicationsAppIdDelete(params: ApiApplicationsAppIdDelete$Params, context?: HttpContext): Observable<ActionResult> {
    return this.apiApplicationsAppIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<ActionResult>): ActionResult => r.body)
    );
  }

}
