using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Spd.Presentation.Dynamics.Services;
using Spd.Utilities.Shared;

namespace Spd.Presentation.Dynamics.Controllers;

/// <summary>
/// ScheduleJob support for dynamics
/// </summary>
[Authorize]
public class ScheduleJobController : SpdControllerBase
{
    private readonly IScheduleJobQueue _jobQueue;
    private readonly IConfiguration _configuration;

    public ScheduleJobController(IScheduleJobQueue jobQueue, IConfiguration configuration) : base()
    {
        _configuration = configuration;
        _jobQueue = jobQueue;
    }

    /// <summary>
    /// Run schedule job session
    /// </summary>
    /// <param name="sessionId">the GUID of schedule job session</param>
    /// <param name="ct">cancellation token, generated by dotnetcore</param>
    /// <response code="200">Ok</response>
    /// <response code="400">if the job session cannot be found</response>
    /// <returns>
    /// </returns>
    [HttpGet]
    [Route("api/schedule-job-session/{sessionId}/run")]
    public async Task<IActionResult> RunJobSessionAsync(
        [FromRoute] Guid sessionId,
        CancellationToken ct)
    {
        int concurrentRequests = _configuration.GetValue<int>("ScheduleJobConcurrentRequests");
        int delay = _configuration.GetValue<int>("ScheduleJob_DelayInMilliSec_BetweenEachThreadsSet");
        _jobQueue.Enqueue(sessionId, concurrentRequests, delay);
        return Ok("Job scheduled.");
    }
}
