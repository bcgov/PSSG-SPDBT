using MediatR;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Spd.Manager.Cases.Payment;
using Spd.Presentation.Dynamics.Models;
using Spd.Utilities.Shared;
using System.ComponentModel.DataAnnotations;

namespace Spd.Presentation.Dynamics.Controllers;

/// <summary>
/// For upload and download file
/// </summary>
[Authorize]
public class PaymentController : SpdControllerBase
{
    private readonly IMediator _mediator;
    private readonly IConfiguration _configuration;

    public PaymentController(IMediator mediator, IConfiguration configuration) : base()
    {
        _mediator = mediator;
        _configuration = configuration;
    }

    /// <summary>
    /// Get a pre payment link
    /// </summary>
    /// <param name="applicationId">the GUID of the file</param>
    /// <param name="ct">cancellation token, generated by dotnetcore</param>
    /// <response code="200">Ok, the file was updated</response>
    /// <response code="201">Created, the file was created</response>
    /// <response code="400">Bad Request, classification header is missing,form data is invalid or file id is not a valid guid</response>
    /// <returns>
    /// </returns>
    [HttpGet]
    [Route("api/pre-payment-link/{applicationId}")]
    public async Task<PrePaymentLinkResponse> GetPrePaymentLinkAsync(
        [FromRoute] Guid applicationId,
        CancellationToken ct)
    {
        string? screeningHostUrl = _configuration.GetValue<string>("ScreeningHostUrl");
        return await _mediator.Send(new PrePaymentLinkCreateCommand(applicationId, screeningHostUrl), ct);

    }


}
