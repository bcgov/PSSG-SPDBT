using System.Text.Json;
using System.Text.Json.Serialization;

namespace Spd.Utilities.Printing.BCMailPlus;

/// <summary>
/// BCMailPlus Sdk
/// </summary>
internal interface IBcMailPlusApi
{
    /// <summary>
    /// Creates a new job
    /// </summary>
    /// <param name="jobClass">The job class</param>
    /// <param name="payload">The payload for the job</param>
    /// <param name="ct">A cancellation token</param>
    /// <returns>A job status instance</returns>
    Task<JobStatus> CreateJob(string jobClass, JsonDocument payload, CancellationToken ct);

    /// <summary>
    /// Gets job statuses
    /// </summary>
    /// <param name="jobs">The job ids to get statuses for</param>
    /// <param name="ct">A cancellation token</param>
    /// <returns>Array of job status responses</returns>
    Task<JobStatusResponse> GetJobStatus(IEnumerable<string> jobs, CancellationToken ct);

    /// <summary>
    /// Gets a digital asset from a job
    /// </summary>
    /// <param name="jobId">The job id</param>
    /// <param name="asset">The asset name</param>
    /// <param name="ct">A cancellation token</param>
    /// <returns>Byte array representing the asset, null if not found</returns>
    Task<byte[]?> GetAsset(string jobId, string asset, CancellationToken ct);
}

/// <summary>
/// BCMailPlus job status response
/// </summary>
internal class JobStatus
{
    /// <summary>
    /// The job id
    /// </summary>
    [JsonPropertyName("jobId")]
    public string? JobId { get; set; }

    /// <summary>
    /// The job status
    /// </summary>
    [JsonPropertyName("jobStatus")]
    public string? Status { get; set; }

    /// <summary>
    /// Any errors related to the job
    /// </summary>
    [JsonPropertyName("errors")]
    public string? Errors { get; set; }

    /// <summary>
    /// Various job properties
    /// </summary>
    [JsonPropertyName("jobProperties")]
    public JobProperties? JobProperties { get; set; }
}

/// <summary>
/// BCMailPlus job properties
/// </summary>
internal class JobProperties
{
    /// <summary>
    /// BCMailPlus internal job id
    /// </summary>
    [JsonPropertyName("JOB_ID")]
    public int? JobId { get; set; }

    /// <summary>
    /// The Asset name generated by the job
    /// </summary>
    [JsonPropertyName("ASSET")]
    public string? Asset { get; set; }
}

/// <summary>
/// Response from job status request
/// </summary>
internal class JobStatusResponse
{
    /// <summary>
    /// List of jobs with statuses
    /// </summary>
    [JsonPropertyName("jobs")]
    public IEnumerable<JobStatus> Jobs { get; set; } = Array.Empty<JobStatus>();
}

/// <summary>
/// Contains a BCMailPlus job information and expected behaviour
/// </summary>
/// <param name="JobName">The job name as defined by BCMailPlus</param>
/// <param name="AssetExtension">The file extension of the generated preview of the job</param>
internal record JobTemplate(string JobName, string AssetExtension);

/// <summary>
/// Job names
/// </summary>
public static class Jobs
{
    /// <summary>
    /// Security worker licence job: it will generate image file
    /// </summary>
    public const string SecurityWorkerLicense = "PSSG-SPD-CARD";

    /// <summary>
    /// Business licence job
    /// </summary>
    public const string BusinessLicense = "PSSG-SPD-BUS-LIC";

    /// <summary>
    /// Fingerprint letter job
    /// </summary>
    public const string FingerprintsLetter = "PSSG-SPD-FPT-LET";

    /// <summary>
    /// Metal dealer and recyclers permit job
    /// </summary>
    public const string MetalDealerAndRecyclersPermit = "PSSG-SPD-MTL-PMT";

    /// <summary>
    /// Release Security worker licence job: the job will be routed to the physical printing queue
    /// </summary>
    public const string SecurityWorkerLicenseRelease = "PSSG-SPD-CARD-RELEASE";
}

internal static class JobStatusValues
{
    /// <summary>
    /// Job status that indicates success, record data rendered to pdb
    /// </summary>
    public const string PdfCreated = "PDF_CREATED";

    /// <summary>
    /// Pdf created that awaiting for batching
    /// </summary>
    public const string PdfCreatedAwaitingBatching = "PDF_CREATED_AWAITING_BATCHING";

    /// <summary>
    /// Job status that indicates errors
    /// </summary>
    public const string ProcessingError = "PROCESSING_ERROR";

    /// <summary>
    /// Job status that indicates errors, Initial record data received 
    /// </summary>
    public const string FileReceived = "FILE_RECEIVED";

    /// <summary>
    /// Initial request data received, for PSSG-SPD-CARD-RELEASE
    /// </summary>
    public const string RequestReceived = "REQUEST_RECEIVED";

    /// <summary>
    /// Batch configured for QA, for PSSG-SPD-CARD-RELEASE
    /// </summary>
    public const string BatchConfigured = "BATCH_CONFIGURED";

    /// <summary>
    /// Batch enqueued for print, for PSSG-SPD-CARD-RELEASE
    /// </summary>
    public const string SentForProcessing = "SENT_FOR_PROCESSING";
}